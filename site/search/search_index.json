{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Overview Bauction is a decentralized, distributed, peer-to-peer auction platform . Bauction uses Internet Computer Protocol as platform to host and store auction data over blockchain. Bauction is one of the first platform to provide fully decentralized platform for auctioning rare items over the decentralized web. Installation: yarn add bauction-js or npm install bauction-js Basic Usage import Bauction from \"bauction-js\"; const bauctionInstance = new Bauction(); //use async function for this: await bauctionInstance.initIdentity(\"path-to-secret-key\"); bauctionInstance.getAllAuctions(); //to fetch all auctions from bauction canister. Example import Bauction from \"bauction-js\"; const bauctionIns = new Bauction(); const initializeBauction = async () => { await bauctionIns.initIdentity(\"/root/user/my_secret_key.cer\"); }; initializeBauction(); bauctionIns.getMyAuctions(); //returns all auctions created by identity bauction is initialized with.","title":"Welcome to bauction"},{"location":"#overview","text":"Bauction is a decentralized, distributed, peer-to-peer auction platform . Bauction uses Internet Computer Protocol as platform to host and store auction data over blockchain. Bauction is one of the first platform to provide fully decentralized platform for auctioning rare items over the decentralized web.","title":"Overview"},{"location":"#installation","text":"yarn add bauction-js or npm install bauction-js","title":"Installation:"},{"location":"#basic-usage","text":"import Bauction from \"bauction-js\"; const bauctionInstance = new Bauction(); //use async function for this: await bauctionInstance.initIdentity(\"path-to-secret-key\"); bauctionInstance.getAllAuctions(); //to fetch all auctions from bauction canister.","title":"Basic Usage"},{"location":"#example","text":"import Bauction from \"bauction-js\"; const bauctionIns = new Bauction(); const initializeBauction = async () => { await bauctionIns.initIdentity(\"/root/user/my_secret_key.cer\"); }; initializeBauction(); bauctionIns.getMyAuctions(); //returns all auctions created by identity bauction is initialized with.","title":"Example"},{"location":"methods/bidOnAuction/","text":"To bid on any type of auction. On success, returns true otherwise false. Usage bidOnAuction(auction_id, bidAmmount); Parameters auction_id: String bidAmount: Natural number Example const auction_id = \"80C4AB98-08B8-16D1-0000-000000000000\"; const bidAdded = await bauctionInstance.bidOnAuction(auction_id, 8000); //returns true or false","title":"bidOnAuction"},{"location":"methods/bidOnAuction/#usage","text":"bidOnAuction(auction_id, bidAmmount);","title":"Usage"},{"location":"methods/bidOnAuction/#parameters","text":"auction_id: String bidAmount: Natural number","title":"Parameters"},{"location":"methods/bidOnAuction/#example","text":"const auction_id = \"80C4AB98-08B8-16D1-0000-000000000000\"; const bidAdded = await bauctionInstance.bidOnAuction(auction_id, 8000); //returns true or false","title":"Example"},{"location":"methods/createAuction/","text":"createAuction To create any type of new auction. Returns created auction. Usage createAuction(auctionInput); Parameters auctionInput: Object, contains the fields to be updated. auctionInput = { name: Text; startDate: Text; endDate: Text; description: Text; minBidAmt: Nat; maxBidAmt: Nat; category: Text; location: Text; auctionType: AuctionDirectionType; } here, auctionDirectionType: enum [\"ForwardAuction\", \"ReverseAuction\", \"ETender\", \"FlexibleOffers\"] minBidAmt and maxBidAmt dependent upon type of auction. For Reverse Auction maxBidAmt will be considered and all bids will be less than maxBidAmt. For other type of auction minBidAmt will be considered minimum bid amount or base amount for that auction. Example const auctionInput = { name: \"auction name\", category: \"digital art\", startDate: \"Mon Feb 07 2022 21:11:54\", endDate: \"Mon Feb 12 2022 21:11:54\", description: \"description of the auction\", minBidAmt: 1000, category: \"digital art\", location: \"location string\", auctionType: \"ForwardAuction\", }; const createdAuction = await bauctionInstance.createAuction(auctionInput); //returns created auction","title":"createAuction"},{"location":"methods/createAuction/#createauction","text":"To create any type of new auction. Returns created auction.","title":"createAuction"},{"location":"methods/createAuction/#usage","text":"createAuction(auctionInput);","title":"Usage"},{"location":"methods/createAuction/#parameters","text":"auctionInput: Object, contains the fields to be updated. auctionInput = { name: Text; startDate: Text; endDate: Text; description: Text; minBidAmt: Nat; maxBidAmt: Nat; category: Text; location: Text; auctionType: AuctionDirectionType; } here, auctionDirectionType: enum [\"ForwardAuction\", \"ReverseAuction\", \"ETender\", \"FlexibleOffers\"] minBidAmt and maxBidAmt dependent upon type of auction. For Reverse Auction maxBidAmt will be considered and all bids will be less than maxBidAmt. For other type of auction minBidAmt will be considered minimum bid amount or base amount for that auction.","title":"Parameters"},{"location":"methods/createAuction/#example","text":"const auctionInput = { name: \"auction name\", category: \"digital art\", startDate: \"Mon Feb 07 2022 21:11:54\", endDate: \"Mon Feb 12 2022 21:11:54\", description: \"description of the auction\", minBidAmt: 1000, category: \"digital art\", location: \"location string\", auctionType: \"ForwardAuction\", }; const createdAuction = await bauctionInstance.createAuction(auctionInput); //returns created auction","title":"Example"},{"location":"methods/deleteAuction/","text":"deleteAuction To delete an auction. Note Only auction which haven't started yet, can be deleted. Only auction creator is allowed to delete the auction. On success, returns true, otherwise returns Error. Usage deleteAuction(auction_id); Parameters auction_id: String Example const auction_id = \"80C4AB98-08B8-16D1-0000-000000000000\"; const deleted = await bauctionInstance.bidOnAuction(auction_id); //returns true or Error","title":"deleteAuction"},{"location":"methods/deleteAuction/#deleteauction","text":"To delete an auction.","title":"deleteAuction"},{"location":"methods/deleteAuction/#note","text":"Only auction which haven't started yet, can be deleted. Only auction creator is allowed to delete the auction. On success, returns true, otherwise returns Error.","title":"Note"},{"location":"methods/deleteAuction/#usage","text":"deleteAuction(auction_id);","title":"Usage"},{"location":"methods/deleteAuction/#parameters","text":"auction_id: String","title":"Parameters"},{"location":"methods/deleteAuction/#example","text":"const auction_id = \"80C4AB98-08B8-16D1-0000-000000000000\"; const deleted = await bauctionInstance.bidOnAuction(auction_id); //returns true or Error","title":"Example"},{"location":"methods/findAuctionById/","text":"To find an auction by auction id. return the Auction details. Usage findAuctionById(auction_id); Parameters auction_id: String Example const auction_id = \"80C4AB98-08B8-16D1-0000-000000000000\"; const auction = await bauctionInstance.findAuctionById(auction_id); //returns auction details.","title":"findAuctionById"},{"location":"methods/findAuctionById/#usage","text":"findAuctionById(auction_id);","title":"Usage"},{"location":"methods/findAuctionById/#parameters","text":"auction_id: String","title":"Parameters"},{"location":"methods/findAuctionById/#example","text":"const auction_id = \"80C4AB98-08B8-16D1-0000-000000000000\"; const auction = await bauctionInstance.findAuctionById(auction_id); //returns auction details.","title":"Example"},{"location":"methods/getAllAuctions/","text":"To get all auctions and their details. return an Array of all auction details. Usage getAllAuctions(); Example const allAuctions = await bauctionInstance.getAllAuctions(); //returns array of all auctions.","title":"getAllAuctions"},{"location":"methods/getAllAuctions/#usage","text":"getAllAuctions();","title":"Usage"},{"location":"methods/getAllAuctions/#example","text":"const allAuctions = await bauctionInstance.getAllAuctions(); //returns array of all auctions.","title":"Example"},{"location":"methods/getAuctionWinner/","text":"getAuctionWinner","title":"getAuctionWinner"},{"location":"methods/getAuctionWinner/#getauctionwinner","text":"","title":"getAuctionWinner"},{"location":"methods/getHighestBid/","text":"getHighestBid Returns the highest bid of the auction. On success, return the highest bid of the auction. Note In case of E-Tenders, highest bid will always return 0, as bid are not exposed till the auction gets over. Highest bid is subjective to the type of auction. In case of Reverse auction, most minimum bid will be returned, In case of flexible offers and Forward auctions, maximum bid will be returned. Usage getHighestBid(auction_id); Parameters auction_id: String Example const auction_id = \"80C4AB98-08B8-16D1-0000-000000000000\"; const highestBid = await bauctionInstance.getHighestBid(auction_id); //returns highest bid (Natural number)","title":"getHighestBid"},{"location":"methods/getHighestBid/#gethighestbid","text":"Returns the highest bid of the auction. On success, return the highest bid of the auction.","title":"getHighestBid"},{"location":"methods/getHighestBid/#note","text":"In case of E-Tenders, highest bid will always return 0, as bid are not exposed till the auction gets over. Highest bid is subjective to the type of auction. In case of Reverse auction, most minimum bid will be returned, In case of flexible offers and Forward auctions, maximum bid will be returned.","title":"Note"},{"location":"methods/getHighestBid/#usage","text":"getHighestBid(auction_id);","title":"Usage"},{"location":"methods/getHighestBid/#parameters","text":"auction_id: String","title":"Parameters"},{"location":"methods/getHighestBid/#example","text":"const auction_id = \"80C4AB98-08B8-16D1-0000-000000000000\"; const highestBid = await bauctionInstance.getHighestBid(auction_id); //returns highest bid (Natural number)","title":"Example"},{"location":"methods/getMyAuctionCount/","text":"getMyAuctionCount Returns count of auctions created by authenticated user. Usage: getMyAuctionCount(); Example const count = await bauctionInstance.getMyAuctionCount(); //returns auction count","title":"getMyAuctionCount"},{"location":"methods/getMyAuctionCount/#getmyauctioncount","text":"Returns count of auctions created by authenticated user.","title":"getMyAuctionCount"},{"location":"methods/getMyAuctionCount/#usage","text":"getMyAuctionCount();","title":"Usage:"},{"location":"methods/getMyAuctionCount/#example","text":"const count = await bauctionInstance.getMyAuctionCount(); //returns auction count","title":"Example"},{"location":"methods/getMyAuctions/","text":"getMyAuctions Returns Array of auctions of authenticated user. Usage getMyAuctions(); Example const auctions = await bauctionInstance.getMyAuctions(); //returns Array of auctions","title":"getMyAuctions"},{"location":"methods/getMyAuctions/#getmyauctions","text":"Returns Array of auctions of authenticated user.","title":"getMyAuctions"},{"location":"methods/getMyAuctions/#usage","text":"getMyAuctions();","title":"Usage"},{"location":"methods/getMyAuctions/#example","text":"const auctions = await bauctionInstance.getMyAuctions(); //returns Array of auctions","title":"Example"},{"location":"methods/updateAuction/","text":"updateAuction To update an auction. Note Only auction which are not started yet, can be updated. Only auction creator can update the auction. Only name, description and category can updated. On success, returns updated auction. Usage updateAuction(auction_id, auctionUpdates); Parameters auction_id: String auctionUpdates: Object, contains the fields to be updated. auctionUpdates = { name: String, description: String, category: String } Example const auction_id = \"80C4AB98-08B8-16D1-0000-000000000000\"; const auctionUpdates = { name: \"updated name\", description: \"updated auction description\", category: \"digital art\", }; const updatedAuction = await bauctionInstance.updateAuction( auction_id, auctionUpdates ); //returns updated auction","title":"updateAuction"},{"location":"methods/updateAuction/#updateauction","text":"To update an auction.","title":"updateAuction"},{"location":"methods/updateAuction/#note","text":"Only auction which are not started yet, can be updated. Only auction creator can update the auction. Only name, description and category can updated. On success, returns updated auction.","title":"Note"},{"location":"methods/updateAuction/#usage","text":"updateAuction(auction_id, auctionUpdates);","title":"Usage"},{"location":"methods/updateAuction/#parameters","text":"auction_id: String auctionUpdates: Object, contains the fields to be updated. auctionUpdates = { name: String, description: String, category: String }","title":"Parameters"},{"location":"methods/updateAuction/#example","text":"const auction_id = \"80C4AB98-08B8-16D1-0000-000000000000\"; const auctionUpdates = { name: \"updated name\", description: \"updated auction description\", category: \"digital art\", }; const updatedAuction = await bauctionInstance.updateAuction( auction_id, auctionUpdates ); //returns updated auction","title":"Example"},{"location":"sections/basic-usage/","text":"Installation yarn add bauction-js or npm install bauction-js Basic Usage import Bauction from \"bauction-js\"; const bauctionInstance = new Bauction(); //use async function for this: await bauctionInstance.initIdentity(\"path-to-secret-key\"); bauctionInstance.getAllAuctions(); //to fetch all auctions from bauction canister. Example import Bauction from \"bauction-js\"; const bauctionIns = new Bauction(); const initializeBauction = async () => { await bauctionIns.initIdentity(\"/root/user/my_secret_key.cer\"); }; initializeBauction(); bauctionIns.getMyAuctions(); //returns all auctions created by identity bauction is initialized with.","title":"Basic usage"},{"location":"sections/basic-usage/#installation","text":"yarn add bauction-js or npm install bauction-js","title":"Installation"},{"location":"sections/basic-usage/#basic-usage","text":"import Bauction from \"bauction-js\"; const bauctionInstance = new Bauction(); //use async function for this: await bauctionInstance.initIdentity(\"path-to-secret-key\"); bauctionInstance.getAllAuctions(); //to fetch all auctions from bauction canister.","title":"Basic Usage"},{"location":"sections/basic-usage/#example","text":"import Bauction from \"bauction-js\"; const bauctionIns = new Bauction(); const initializeBauction = async () => { await bauctionIns.initIdentity(\"/root/user/my_secret_key.cer\"); }; initializeBauction(); bauctionIns.getMyAuctions(); //returns all auctions created by identity bauction is initialized with.","title":"Example"},{"location":"sections/overview/","text":"Bauction is a decentralized, distributed, peer-to-peer auction platform . Bauction uses Internet Computer Protocol as platform to host and store auction data over blockchain. Bauction is one of the first platform to provide fully decentralized platform for auctioning rare items over the decentralized web.","title":"Overview"}]}